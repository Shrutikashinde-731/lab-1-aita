# prompt: Now for the above code, i need to generate the path for both search algorithms i.e DFS and BFS

import networkx as nx
import matplotlib.pyplot as plt


def generate_tree(nodes, children_per_node):
    G = nx.Graph()
    node_count = 0
    queue = [0]
    while node_count < nodes:
        parent = queue.pop(0)
        for _ in range(children_per_node):
            node_count += 1
            G.add_edge(parent, node_count)
            queue.append(node_count)
    return G

def visualize_graph(G, traversal_type="dfs"):
    pos = nx.nx_pydot.pydot_layout(G, prog='dot')
    nx.draw(G, pos, with_labels=True, node_size=700, node_color="skyblue", font_size=12, font_weight="bold")
    plt.title(f"Visualization of a Tree ({traversal_type.upper()})")
    plt.show()

def get_traversal_path(G, traversal_type, start_node=0):
    if traversal_type.lower() == "dfs":
        return list(nx.dfs_preorder_nodes(G, source=start_node))
    elif traversal_type.lower() == "bfs":
        return list(nx.bfs_tree(G, source=start_node))
    else:
        return None

# Generate a tree with 20 nodes, each having 2 children
tree = generate_tree(nodes=20, children_per_node=2)

# Visualize the tree using DFS
visualize_graph(tree, traversal_type="dfs")

# Visualize the tree using BFS
visualize_graph(tree, traversal_type="bfs")

# Get and print the DFS traversal path
dfs_path = get_traversal_path(tree, "dfs")
print("DFS Traversal Path:", dfs_path)

# Get and print the BFS traversal path
bfs_path = get_traversal_path(tree, "bfs")
print("BFS Traversal Path:", bfs_path)
